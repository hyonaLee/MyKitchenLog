{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uD600\\uB098\\\\Desktop\\\\React Project\\\\mykitchenlog\\\\client\\\\src\\\\Components\\\\View\\\\Main\\\\NewPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport store from \"../../../Store/store\";\nimport { observer } from \"mobx-react\";\n\nfunction NewPost() {\n  _s();\n\n  //autofocus\n  const onfocus = useRef();\n  useEffect(() => {\n    if (onfocus.current) {\n      onfocus.current.focus();\n    }\n  }, []); // 날짜정보얻기\n\n  const currentDate = new Date();\n  const cYear = currentDate.getFullYear();\n  const cMonth = currentDate.getMonth() + 1;\n  const cDate = currentDate.getDate();\n  const cHour = currentDate.getHours();\n  const cMin = currentDate.getMinutes();\n  const editTime = `${cYear}년 ${cMonth}월 ${cDate}일 ${cHour}시 ${cMin}분`; // user가 작성한 input 받아오기\n\n  const [inputs, setInputs] = useState({\n    title: \"\",\n    tag: \"\",\n    contents: \"\"\n  });\n  const {\n    title,\n    contents,\n    tag\n  } = inputs;\n\n  const onChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputs({ ...inputs,\n      [name]: value\n    });\n  }; // console.log(inputs);\n  // 이미지 업로드\n\n\n  const [loadfile, setLoadfile] = useState();\n  const [currentfile, setCurrentfile] = useState();\n\n  const Loadedfile = e => {\n    setLoadfile(URL.createObjectURL(e.target.files[0]));\n    let fileReader = new FileReader(); // e.preventDefault();\n\n    fileReader.readAsDataURL(e.target.files[0]);\n\n    fileReader.onload = function (e) {\n      setCurrentfile(e.target.result); // console.log(e.target.result)\n    }; // console.log(e.target.files[0])\n    // console.log(e.target.value)\n\n  }; // 해시태그 기능\n\n\n  const [tagList, setTagList] = useState([]);\n\n  const Keypress = e => {\n    if (e.key === \"Enter\" || e.code === \"Space\") {\n      setTagList(tagList => [...tagList, inputs.tag]);\n      setInputs({ ...inputs,\n        tag: \"\"\n      });\n      e.preventDefault();\n    }\n\n    console.log(\"인풋\", inputs.tag);\n    console.log(\"태그리스트\", tagList);\n  }; // (POST) serer로 data 생성 요청\n\n\n  const postData = () => {\n    const mappingData = {\n      date: editTime,\n      title: title,\n      tag: tagList,\n      contents: contents,\n      imgURL: currentfile\n    };\n    store.AddData(mappingData);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"EditDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"EditTitle\",\n    name: \"title\",\n    value: title,\n    type: \"text\",\n    placeholder: \"\\uC694\\uB9AC\\uBA85\",\n    onChange: onChange,\n    ref: onfocus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"EditTagDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"EditTag\",\n    name: \"tag\",\n    value: tag,\n    type: \"text\",\n    placeholder: \"\\uC8FC\\uC7AC\\uB8CC\",\n    onChange: onChange,\n    onKeyPress: Keypress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"EditTagShowDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, tagList.length !== 0 && tagList.map((v, i) => {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"hash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 22\n      }\n    }, \"#\", tagList[i], \" \");\n  }))), /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"EditContents\",\n    name: \"contents\",\n    value: contents,\n    placeholder: \"\\uB0B4\\uC6A9\",\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"EditBtnDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: loadfile,\n    alt: \"Blob URL\",\n    width: \"100px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \"image/*\",\n    onChange: Loadedfile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"EditBtn\",\n    onClick: postData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, \"Post\"))));\n}\n\n_s(NewPost, \"VDsufGqlWvuYXMfvudB4sakMLE4=\");\n\n_c = NewPost;\nexport default _c2 = observer(NewPost);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NewPost\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/혀나/Desktop/React Project/mykitchenlog/client/src/Components/View/Main/NewPost.js"],"names":["React","useRef","useState","useEffect","Link","store","observer","NewPost","onfocus","current","focus","currentDate","Date","cYear","getFullYear","cMonth","getMonth","cDate","getDate","cHour","getHours","cMin","getMinutes","editTime","inputs","setInputs","title","tag","contents","onChange","e","name","value","target","loadfile","setLoadfile","currentfile","setCurrentfile","Loadedfile","URL","createObjectURL","files","fileReader","FileReader","readAsDataURL","onload","result","tagList","setTagList","Keypress","key","code","preventDefault","console","log","postData","mappingData","date","imgURL","AddData","length","map","v","i"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport store from \"../../../Store/store\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nfunction NewPost() {\r\n  //autofocus\r\n  const onfocus = useRef();\r\n  useEffect(() => {\r\n    if (onfocus.current) {\r\n      onfocus.current.focus();\r\n    }\r\n  }, []);\r\n\r\n  // 날짜정보얻기\r\n  const currentDate = new Date();\r\n  const cYear = currentDate.getFullYear();\r\n  const cMonth = currentDate.getMonth() + 1;\r\n  const cDate = currentDate.getDate();\r\n  const cHour = currentDate.getHours();\r\n  const cMin = currentDate.getMinutes();\r\n  const editTime = `${cYear}년 ${cMonth}월 ${cDate}일 ${cHour}시 ${cMin}분`;\r\n\r\n  // user가 작성한 input 받아오기\r\n  const [inputs, setInputs] = useState({\r\n    title: \"\",\r\n    tag: \"\",\r\n    contents: \"\",\r\n  });\r\n  const { title, contents, tag } = inputs;\r\n  const onChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setInputs({\r\n      ...inputs,\r\n      [name]: value,\r\n    });\r\n  };\r\n  // console.log(inputs);\r\n\r\n  // 이미지 업로드\r\n  const [loadfile, setLoadfile] = useState();\r\n  const [currentfile, setCurrentfile] = useState();\r\n  const Loadedfile = (e) => {\r\n    setLoadfile(URL.createObjectURL(e.target.files[0]));\r\n    let fileReader = new FileReader();\r\n    // e.preventDefault();\r\n    fileReader.readAsDataURL(e.target.files[0]);\r\n    fileReader.onload = function (e) {\r\n      setCurrentfile(e.target.result);\r\n      // console.log(e.target.result)\r\n    };\r\n    // console.log(e.target.files[0])\r\n    // console.log(e.target.value)\r\n  };\r\n\r\n  // 해시태그 기능\r\n  const [tagList, setTagList] = useState([]);\r\n  const Keypress = (e) => {\r\n    if (e.key === \"Enter\" || e.code === \"Space\") {\r\n      setTagList((tagList) => [...tagList, inputs.tag]);\r\n      setInputs({\r\n        ...inputs,\r\n        tag: \"\",\r\n      });\r\n      e.preventDefault();\r\n    }\r\n\r\n    console.log(\"인풋\", inputs.tag);\r\n    console.log(\"태그리스트\", tagList);\r\n  };\r\n\r\n  // (POST) serer로 data 생성 요청\r\n  const postData = () => {\r\n    const mappingData = {\r\n      date: editTime,\r\n      title: title,\r\n      tag: tagList,\r\n      contents: contents,\r\n      imgURL: currentfile,\r\n    };\r\n    store.AddData(mappingData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"EditDiv\">\r\n      <textarea className=\"EditTitle\"\r\n        name=\"title\"\r\n        value={title}\r\n        type=\"text\"\r\n        placeholder=\"요리명\"\r\n        onChange={onChange}\r\n        ref={onfocus}\r\n      />\r\n      <div className=\"EditTagDiv\">\r\n        <textarea className=\"EditTag\"\r\n          name=\"tag\"\r\n          value={tag}\r\n          type=\"text\"\r\n          placeholder=\"주재료\"\r\n          onChange={onChange}\r\n          onKeyPress={Keypress}\r\n        />\r\n        <div className=\"EditTagShowDiv\">\r\n          {tagList.length !== 0 &&\r\n            tagList.map((v, i) => {\r\n              return <span className=\"hash\">#{tagList[i]} </span>;\r\n            })}\r\n        </div>\r\n      </div>\r\n      <textarea className=\"EditContents\"\r\n        name=\"contents\"\r\n        value={contents}\r\n        placeholder=\"내용\"\r\n        onChange={onChange}\r\n      />\r\n      <div className=\"EditBtnDiv\">\r\n        <img src={loadfile} alt=\"Blob URL\" width=\"100px\" />\r\n        <input type=\"file\" accept=\"image/*\" onChange={Loadedfile} />\r\n        <Link to=\"/\">\r\n          <button className=\"EditBtn\" onClick={postData}>Post</button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default observer(NewPost);\r\n"]},"metadata":{},"sourceType":"module"}